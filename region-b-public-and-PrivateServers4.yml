Description: >
  Nasirali Kovvuru
  Reference: https://github.com/udacity/nd9991-c2-Infrastructure-as-Code-v1

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
        Default: RELEX-Project
    WebAppServersMinSize:
        Description: Min count of application servers to host
        Type: String
        Default: "1"

    WebAppServersMaxSize:
        Description: Max count of application servers to host
        Type: String
        Default: "5"
        
    KeyName: 
        Description: "Name of an existing EC2 KeyPair to enable SSH access to EC2 Instance"
        Type: "AWS::EC2::KeyPair::KeyName"
        Default: 'JumpboxKP'
        ConstraintDescription: "name must match with existing EC2 KeyPair."

    AMI:
        Description: 'The Machine Image to be used. In my case i am using ubuntu instance and AMI ID has chosen from us-west-2 region'
        Type: String
        Default: ami-0528a5175983e7f28
        
    InstanceType: 
        Description: "Bastion EC2 instance type"
        Type: String
        Default: "t2.micro" 


Resources:
  EC2rootrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - Ref: EC2rootrole

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: EC2rootrole
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic via ingress and egress ports to our load balancer.
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp #to allow ssh
        FromPort: 20
        ToPort: 20
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp #to allow ssh
        FromPort: 20
        ToPort: 20
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and SSH traffic ingress and allow tcp traffic open via all ports.
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          #aws ec2 --- #user can run aws cli commands to install additional servers #Permission to create as many servers as you like in RELEX subnet (we can consider whole private network as relex subnet)
          
      ImageId: ami-003634241a8fcdec0
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10" #10Gigs

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref WebAppServersMinSize
      MaxSize: !Ref WebAppServersMaxSize
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
        
  JumpServer: 
        Type: "AWS::EC2::Instance"
        Properties: 
          InstanceType: !Ref InstanceType
          SecurityGroupIds: 
          - !Ref InstanceSecurityGroup
          KeyName: !Ref KeyName
          ImageId: !Ref AMI
          SubnetId: 
            Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          #NetworkInterfaces: 
          #- AssociatePublicIpAddress: "true"
          #  DeviceIndex: "0"
          

  InstanceSecurityGroup: 
        Type: "AWS::EC2::SecurityGroup"
        Properties: 
          GroupDescription: "Enable SSH access via port 22"
          VpcId: 
            Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"  
          SecurityGroupIngress: 
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp:  "85.226.45.135/32" 
          
          
Outputs:
  WebAppLoadBalancerDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName


  InstanceId: 
    Description: "To output the instance ID of the EC2 Instance Created"
    Value: 
      Ref: JumpServer
 
 
  PublicIP: 
    Description: "To output the publicIP address of the EC2 Instance Created"
    Value: 
      "Fn::GetAtt": 
      - JumpServer
      - PublicIp

  sgBastion:
    Description: Bastion SecurityGroup Export
    Value: 
      !GetAtt
        - InstanceSecurityGroup
        - GroupId
    Export:
      Name: !Sub "${EnvironmentName}-BastionSecurityGroupID"